---
layout: post
title: Краткая шпаргалка по bash
category: article
comments: true
description: Краткая шпаргалка по bash или конспект книги "Программирование командных оболочек в Unix, Linux и OS X"
tags:
    - bash
    - help
---

### Арифметические операции

```
    $(( i + (i + 10) * j ))
    или
    expr i + j

```

### Передача аргументов

```
    Позиционные параметры - $1, $2, $3 ... $10, ${11}, ${12} ...
    Переменная $# - количество переданных аргументов
    Переменная $* - ссылка на все аргументы
    Переменная "$@" - не парсит пробелы в аргументах 
    Команда shift - сдвиг влево позиционных параметров и удаление $1
    ${#переменная} - количество символов в переменной
    Переменная $0 - имя выполняемой программы/команды 3
    Переменная $$ - ID процесса, присвоенного программе
```

### Строковые операции сравения

```
    строка = строка
    строка != строка
    строка - строка не нулевая
    -n строка - строка не нулевая
    -z строка - строка нулевая
```

### Целочисленные операции сравнения

```
    int -eq int равно
    int -ge int больше или равно
    int -gt int больше
    int -le int меньше или равно
    int -lt int меньше
    int -ne int не равно
```

### Файловые операции:

```
    -d файл - файл - это каталог
    -e файл - файл - это существующий файл
    -f файл - файл - это обыкновенный файл
    -r файл - файл - это файл доступный для чтения
    -s файл - файл ненулевой длины
    -w файл - файл доступный для записи
    -x файл - файл доступный для выполнения
    -L файл - симлинк
```

### Логические операции

```
    - отрицание
    [ ! -e "$filename" ] - вернет true, если вайл не существует
    [ ! "$x1" != "$x2" ]

    - AND -a

    [ "$x" -ge 0 -a "$x" -lt 10 ]
    [ "$x" -ge 0 && "$x" -lt 10 ]

    - OR -o

    [ "$x" -ge 0 -o "$x" -lt 10 ]
    [ "$x" -ge 0 || "$x" -lt 10 ]
```


### Ветвление

```
    if [ condition ]
    then

    elif
    else
    fi
```

### Case in

```
case "$1"
in
    0) echo 0;;
    [1-3]) echo onetwothree;;
    4) echo four;;
    *) echo "Bad argument";;
esac
```

### Циклы

- FOR

```
    for i in [1-5] или $(ls) или $*
    do
        run $file
    done

    for var
    do

    done 

    тоже самое, что

    for var in "$@"
    do
    done
```

- WHILE

```
while команда
do
done

цикл выполняется, пока код выполнения команды = 0
```

- UNTIL

```
until команда
do
done

цикл выполняется, пока код выполнения команды != 0
```

break - команды выходы из цикла (break n  - на сколько уровней вверх выйти)

### getopts

```
getopts параметры переменная

Например 

getopts mt: option

двоеточие означает, что ну параметра должно быть значение
```

![alt text](http://devopspath.ru/resources/images/getopts.png")



### Ввод данных

```
read - ввод данных пользователем

echo "Enter your name: \c"
read $name
```

### Конструкции

```
(...) 
и
{ ...; }

```
Для группировки команд. Первая выполянет команды в подоболочке, вторая - в текущей оболочке.

### Передача переменных подоболочке

```
VAR1=lalala VAR2-ololo program1
```

### Подстановка параметров

```
Конструкция ${параметр:-значение} - использовать значение указанного параметра, если оно не является пустым, иначе - подставить заданное значение

Пример:

echo "Using editor ${EDITOR:-/bin/vim}"

Конструкция ${параметр:=значение} - использовать значение указанного параметра, если оно не является пустым, иначе - подставить и присвоить заданное значение

Контрукция ${параметр:?значение} - если в этой конструкции заданный параметр имеет непустое значение, если оно не является пустым, то оболочка подставит его. В противном случае, оболочка направит указанное значение в STDERR и завершит выполнение.

![alt text](http://devopspath.ru/resources/images/konstr.png "конструкция")

Констурукция ${параметр:+значение} - указанное значение подставляется, если заданный параметр имеет непустое значение, а иначе вообще ничего не подставляется
```

### Функции

```
Общий вид:

function () { command; command; }
```
