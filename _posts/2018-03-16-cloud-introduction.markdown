---
layout: post
title: Введение про облака
category: devops_training
comments: true
description: Про облака, Google Cloud Platform, как это все применимо к DevOps
tags:
    - DevOps
    - Learning
    - Otus.ru
---

### Введение в облачные вычисления

Это занятие было введением в тему облачных вычислений, зачем они нужны, что из себя представляют и какие преимущества могут дать компаниям.

Очень забавно, облачные технологии зародились сравнительно недавно, а концепт по сути работал в самом начале компьютерной эры. Каждый помнит истории о том, что когда-то компьютеры были большими и занимали здания, использовались они совместно для каких-то сложных вычислений, каждый юзер занимал сколько-то времени использования машины и платил за это. Правда знакомо? Абсолютно то же самое сейчас предоставляют облачные провайдеры, с той лишь разницей, что теперь это все находится где-то далеко и удаленно и вместо каких-нибудь перфокарт, мы скармливем виртуальным инстансам свой код.

А ведь от этого уходили и уходили - сначала появились пользовательские терминалы, которые были по сути экраном с клавиатурой, куда можно было вводить код и занимать время центральной машины, потом мейнфреймы, потом все это эволюционировало в клиент-серверные технологии, а сейчас в Software Defined Infrastructure. То есть вообще без разницы что там за железо, все работает на логическом слое. Виртуальные сервера, виртуальные сети, виртуальные диски - вот это вот всё.

И это позволяет небольшим компаниям не заморачиваться насчет своей ИТ-инфраструктуры. Ну точнее не заморачиваться по поводу своей серверной, стоек, серверов, их обслуживания. Но заморачиваться по поводу выбора оптимальной конфигурации виртуальной инфраструктуры, так как за любой лишний ресурс придется платить.

Облачные технологии дали жизнь куче новых услуг и продуктов:

- Инфраструктура как сервис (IaaS) - в основном, под этим понимается выделение физических или виртуальных машин для нужд клиента
- Платформа как сервис (PaaS) - выделение готовой платформы для сиполнения кода, работы приложений
- Программное обеспечение как сервис (SaaS) - предоставление доступа к готовым программным решениям

И это на самом деле круто, когда я могу не морочиться с покупкой физического сервера, а взять его в аренду в каком-нибудь Хецнере или запустить свое приложение в Heroku без настройки виртуалок или использовать Google Docs, даже не зная, на каком железе/виртуалке/пофик_на_чём они запущены. Таким образом, мы получаем возможность быть гибкими и масштабировать нашу инфраструктуру под требования сегодняшнего дня, экономить деньги и зарабатывать больше и быстрее (в каких-то кейсах это не так, но все же), получать действительно отказоустойчивые решения.

### Google Cloud Platform

В курсе все последующие задания построены на использовании Google Cloud Platform (далее GCP). Почему не AWS, потому что GCP дает 300$ на год повеселиться, да и по сути, какая разница, главное - понимать концепции, остальное - рюшечки и конкретные инструменты.

В рамках данного занятия было рассмотрено создание виртуальной машины и сетевых настроек, а также настройка правил брандмауэра. Кроме того рассмотрена концепция Bastion Host - организации доступа к виртуальной инфраструктуре, когда выделяется один хост, на который открыт доступ по ssh, остальные находятся во внутренней сети облака. Это не значит, что эти сервера не могут иметь внешних IP, тот же Web-server должен как-то работать и быть доступным извне (хотя, по хорошему, организуется проксирование запросов к нему и несколько нод для отказоустойчивости), но именно ssh-доступ должен быть организован через некий admin box, на котором кнорме ssh-сервера больше ничего нет.

В домашней работе предлагалось создать виртуалку с внешним IP, которая будет выступать как Bastion Host для внутренней инфраструктуры, а также виртуалку, которая будет иметь только внутренний серый IP. Кроме того, предлагалось изучить вопрос проброса ключа с помощью ssh, а также сквозной вход на внутренние сервера одной командой. Последним заданием было установить на Bastion Host VPN-server Pritunl и настроить подключение к нему.

Домашняя работа выполнена, конфиги запушены в мой учебный репозиторий на GitHub.

**Едем дальше**