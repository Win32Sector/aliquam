---
layout: post
title: ChatOps
category: devops-training
comments: true
description: Продолжаю учиться. Этот пост про занятие посвященное культурному взаимодействию, командной работе и ChatOps, что, как, о чем. Также про знакомство с Travis CI
tags:
    - DevOps
    - Learning
    - Otus.ru
---
### О чем была лекция

Лекция была, в основном, краткой выжимкой двух книг - Создавая организации будущего и Философия DevOps(правда тут обошлось без надуманных проблем diversity и создания многонационалных/разнополых/разнофигзнаеткаких команд, за что огромное спасибо). 

Первая книга описывает модель организации будущего, созданной на принципах самоуправления, групповой ответственности за результат, максимальной мотивированности сотрудников компании. 

Вторая немного об инструментах DevOps и много про всякую дичь в стиле: команды белых мужчин инженеров - это плохо, в команду нужно брать женщин, мужчин, белых, красных, зеленых, серобуромалиновых, индусов, китайцев, геев, трансгендеров и вот тогдаааа вжух и все взлетит. Может это и работает где-то, но, по моему личному и сугубо субъективному мнению, результат команды можно рассматривать как результат сложения векторов. 

Если у тебя в команде все смотрят в одну сторону, результат будет такой:

НАРИСОВАТЬ КАРТИНКИ ВЕКТОРОВ

Если все смотрят в разные стороны, результат может быть ниже или нулевой и каждый раз нужно упираться и кого-то убеждать. В данном случае, опять же из моей практики, результат всегда ниже.

НАРИСОВАТЬ КАРТИНКИ ВЕКТОРОВ

И тут не важно какого цвета кожа и какой пол. Нет смысла на этом заострять внимание в принципе.

Так вот, преподаватель обошелся без всей этой чепухи и рассказывал про человеческое отношение к коллегам, про то, что ошибки - это нормально, про то, что есть другое мнение и как в это встроить ChatOps.

Групповая ответственность обсуждалась как одна из главных вещей, на которых держится хорошая команда. 
- Не искать "козла отпущения" чтобы его наказать, а искать решение проблемы и сделать так, чтобы она не повторилась в будущем. 
- Не пытаться на кого-то переложить всю ответственность, но вместе выстраивать стратегию движения вперед. Каждая точка зрения должна быть услышана. Не обязательно принята, но учтено ее наличие. 
Это все очень круто, потому что свободное общение внутри и между командами, их советы очень помогают работать и делать продукт быстрее и качественнее.

### Философия и методология

Далее обсуждались философии по управлению проектами Lean, Agile.
- Lean - убрать все лишние шаги из процесса производства продукта. 
- Agile - принесение пользы максимально быстро. 
 
Из которых, соответственно, вышли методологии Kanban и Scrum. 
- Kanban - управление процессом производства как потоком, каждая задача должна решаться максимально быстро и не застревать на каких-то этапах. 
- Scrum - это методология, которая говорит, что нужно двигаться короткими спринтами, и в конце каждого спринта предоставлять какой-то пусть и минимально жизнеспособный, но готовый продукт.

Следующей темой было пробивание барьеров. Барьеры между разработчиками и эксплуатацией, между разработчиками и QA, между ними всем вместе взятыми, между бизнесом и инженерами и вообще любыми подразделениями компании. Всё это перекидываение проблемами тормозит процесс создания продукта и увеличивает time to market. НУЖНО ОБЩАТЬСЯ! Нужно и все! Нужно участвовать в стендапах и совещаниях других команд, пытаться выяснить основные боли других команд, которые ты можешь решить и решать их, от этого выиграют все.

### Основные инструменты

- Стендапы для обсуждения текущего положения дел.
- Канбан доски для управления потоком создания продукта.
- Таск-трекеры для управления задачами, временем выполнения.
- Общее инфополе (вики, базы знаний, инструменты мониторинга, общие чаты).
- Управление инцидентами - что мы делаем во время и после возникновения проблем.
- Автоматизация как борьба с человеческим фактором и проблемами, связанными с ним
- Единые настройки и конфигурация - договоренности о синтаксе, единая среда разработки, одно и то же железо и операционные системы.

### Практика ChatOps

Практика ChatOps способствует созданию общего инфополя в команде/командах. Проводится интеграция с инструментами разработки и деплоя. Большая часть работы выполняется прямо в чате. За счет интеграций прямо в чате приходит информация о коммитах, тикетах, удачном или неудачном развертывании кода, и много другое - все зависит от установленных интеграций между чатом и инструментами разработки. 

Популярные чаты:

- Slack
- HipChat
- Rocket.Chat

Практика ChatOps дает команде увеличение скорости обмена информацией, например, мы коммитим, сразу видим что был сделан коммит, CI тестит код и видим результат. Сразу видно кто и где что задеплоил. Кроме того, чат дает дополнительное документирование процесса работы.
Минусы - постоянное переключение и отвлечение. Можно что-то упустить, чат быстро улетает вверх.

### Что я вынес для себя

В своей работе мы в команде используем практику ChatOps, а конкретно - чат для общения внутри команды эксплуатации, документирования поставленных задач, статуса выполнения (выполнено/не выполнено), для оперативного решения вопросов между командами.

Профит с занятия: Посмотрели с командой Rocket.Chat - показали руководству, руководство дало добро на внедрение и премию. На этот момент я окупил стоимость курса =)

Едем дальше.